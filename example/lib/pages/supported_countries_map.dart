import 'dart:async';
import 'dart:convert';
import 'dart:math';

import 'package:countries_world_map/countries_world_map.dart';
import 'package:countries_world_map/data/maps/world_map.dart';
import 'package:flutter/material.dart';

class SupportedCountriesMap extends StatefulWidget {
  const SupportedCountriesMap({Key? key}) : super(key: key);

  @override
  _SupportedCountriesMapState createState() => _SupportedCountriesMapState();
}

class _SupportedCountriesMapState extends State<SupportedCountriesMap> {
  Timer? countdownTimer;
  Duration myDuration = Duration(minutes: 5);
  final List<String> list_name = [
    "afghanistan",
    "albania",
    "algeria",
    "angola",
    "argentina",
    "armenia",
    "australia",
    "austria",
    "azerbaijan",
    "bangladesh",
    "bielorussia",
    "belgio",
    "bhutan",
    "bolivia",
    "bosnia e herzegovina",
    "botswana",
    "brasile",
    "bulgaria",
    "burundi",
    "cambogia",
    "cameroon",
    "canada",
    "repubblica africana centrale",
    "chad",
    "chile",
    "china",
    "colombia",
    "congo",
    "costa rica",
    "costa d'avorio",
    "croazia",
    "cipro",
    "repubblica ceca",
    "danimarca",
    "ecuador",
    "egitto",
    "el salvador",
    "guinea equatoriale",
    "eritrea",
    "estonia",
    "etiopia",
    "finlandia",
    "francia",
    "georgia",
    "germania",
    "ghana",
    "grecia",
    "groelandia",
    "guatemala",
    "guinea",
    "hungheria",
    "islanda",
    "india",
    "indonesia",
    "iran",
    "iraq",
    "irlanda",
    "israele",
    "italia",
    "jamaica",
    "giappone",
    "giordania",
    "kazakhstan",
    "kenya",
    "kiribati",
    "korea del nord",
    "korea del sud",
    "kuwait",
    "kyrgyzstan",
    "repubblica popolare democratica di lao",
    "lettonia",
    "libano",
    "liberia",
    "libia",
    "lituania",
    "lussemburgo",
    "macao",
    "madagascar",
    "malawi",
    "malesia",
    "mali",
    "malta",
    "mauritania",
    "messico",
    "moldavia",
    "monaco",
    "mongolia",
    "marocco",
    "mozambico",
    "myanmar",
    "namibia",
    "nepal",
    "olanda",
    "nuova zelanda",
    "nicaragua",
    "niger",
    "nigeria",
    "norvegia",
    "oman",
    "pakistan",
    "palau",
    "palestina",
    "panama",
    "papua nuova guinea",
    "paraguay",
    "peru",
    "filippine",
    "polonia",
    "portogallo",
    "qatar",
    "romania",
    "federazione russa",
    "rwanda",
    "arabia saudita",
    "senegal",
    "serbia",
    "singapore",
    "slovacchia",
    "slovenia",
    "somalia",
    "sud africa",
    "spagna",
    "sri lanka",
    "sudan",
    "suriname",
    "svezia",
    "svizzera",
    "repubblica araba siriana",
    "taiwan",
    "tanzania",
    "thailandia",
    "tunisia",
    "turchia",
    "turkmenistan",
    "uganda",
    "ucraina",
    "emirati arabi uniti",
    "regno unito",
    "stati uniti d'america",
    "uruguay",
    "uzbekistan",
    "venezuela",
    "vietnam",
    "sahara occidentale",
    "yemen",
    "zambia",
    "zimbabwe",
  ];

  final List<String> list_id = [
    "af",
    "al",
    "dz",
    "ao",
    "ar",
    "am",
    "au",
    "at",
    "az",
    "bd",
    "by",
    "be",
    "bt",
    "bo",
    "ba",
    "bw",
    "bv",
    "bg",
    "bi",
    "kh",
    "cm",
    "ca",
    "cf",
    "td",
    "cl",
    "cn",
    "co",
    "cg",
    "cr",
    "ci",
    "hr",
    "cy",
    "cz",
    "dk",
    "ec",
    "eg",
    "sv",
    "gq",
    "er",
    "ee",
    "et",
    "fi",
    "fr",
    "ge",
    "de",
    "gh",
    "gr",
    "gl",
    "gt",
    "gn",
    "hu",
    "is",
    "in",
    "id",
    "ir",
    "iq",
    "ie",
    "il",
    "it",
    "jm",
    "jp",
    "jo",
    "kz",
    "ke",
    "ki",
    "kp",
    "kr",
    "kw",
    "kg",
    "la",
    "lv",
    "lb",
    "lr",
    "ly",
    "lt",
    "lu",
    "mo",
    "mg",
    "mw",
    "my",
    "ml",
    "mt",
    "mr",
    "mx",
    "md",
    "mc",
    "mn",
    "ma",
    "mz",
    "mm",
    "na",
    "np",
    "nl",
    "nz",
    "ni",
    "ne",
    "ng",
    "no",
    "om",
    "pk",
    "pw",
    "ps",
    "pa",
    "pg",
    "py",
    "pe",
    "ph",
    "pl",
    "pt",
    "qa",
    "ro",
    "ru",
    "rw",
    "sa",
    "sn",
    "rs",
    "sg",
    "sk",
    "si",
    "so",
    "za",
    "es",
    "lk",
    "sd",
    "sr",
    "se",
    "ch",
    "sy",
    "tw",
    "tz",
    "th",
    "tn",
    "tr",
    "tm",
    "ug",
    "ua",
    "ae",
    "gb",
    "us",
    "uy",
    "uz",
    "ve",
    "vn",
    "eh",
    "ye",
    "zm",
    "zw",
  ];
  final List<Color?> list_color = [
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
    Colors.grey,
  ];
  bool timer_avviato = false;
  int index_lista = -1;
  String domanda = "";
  int punteggio = 0;

  void startTimer() {
    countdownTimer =
        Timer.periodic(Duration(seconds: 1), (_) => setCountDown());
    timer_avviato = true;
    index_lista = Random().nextInt(list_id.length);
    domanda = "Trova: " + list_name[index_lista];
  }

  void stopTimer() {
    setState(() => countdownTimer!.cancel());
  }

  void resetTimer() {
    stopTimer();
    setState(() => myDuration = Duration(minutes: 1));
  }

  void setCountDown() {
    final reduceSecondsBy = 1;
    setState(() {
      final seconds = myDuration.inSeconds - reduceSecondsBy;
      if (seconds < 0) {
        countdownTimer!.cancel();
      } else {
        myDuration = Duration(seconds: seconds);
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    String strDigits(int n) => n.toString().padLeft(2, '0');
    final minutes = strDigits(myDuration.inMinutes.remainder(60));
    final seconds = strDigits(myDuration.inSeconds.remainder(60));
    return Stack(
      children: [
        SizedBox(
          height: MediaQuery.of(context).size.height,
          width: MediaQuery.of(context).size.width,
          child: Column(
            children: [
              Center(
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  crossAxisAlignment: CrossAxisAlignment.center,
                  children: [
                    Text(
                      domanda,
                      style: TextStyle(
                          fontWeight: FontWeight.bold,
                          color: Colors.black,
                          fontSize: 25),
                    ),
                    SizedBox(width: 50),
                    Text(
                      '$minutes:$seconds',
                      style: TextStyle(
                          fontWeight: FontWeight.bold,
                          color: Colors.black,
                          fontSize: 50),
                    ),
                    SizedBox(width: 50),
                    Text(
                      "PUNTEGGIO: " + punteggio.toString(),
                      style: TextStyle(
                          fontWeight: FontWeight.bold,
                          color: Colors.black,
                          fontSize: 25),
                    ),
                  ],
                ),
              ),
              InteractiveViewer(
                maxScale: 75.0,
                child: Row(
                  children: [
                    SizedBox(
                      width: MediaQuery.of(context).size.width * 0.92,
                      // Actual widget from the Countries_world_map package.
                      child: SimpleMap(
                        instructions: SMapWorld.instructions,
                        colors: SMapWorldColors(
                          aF: list_color[0],
                          aL: list_color[1],
                          dZ: list_color[2],
                          aO: list_color[3],
                          aR: list_color[4],
                          aM: list_color[5],
                          aU: list_color[6],
                          aT: list_color[7],
                          aZ: list_color[8],
                          bD: list_color[9],
                          bY: list_color[10],
                          bE: list_color[11],
                          bT: list_color[12],
                          bO: list_color[13],
                          bA: list_color[14],
                          bW: list_color[15],
                          bV: list_color[16],
                          bG: list_color[17],
                          bI: list_color[18],
                          kH: list_color[19],
                          cM: list_color[20],
                          cA: list_color[21],
                          cF: list_color[22],
                          tD: list_color[23],
                          cL: list_color[24],
                          cN: list_color[25],
                          cO: list_color[26],
                          cG: list_color[27],
                          cR: list_color[28],
                          cI: list_color[29],
                          hR: list_color[30],
                          cY: list_color[31],
                          cZ: list_color[32],
                          dK: list_color[33],
                          eC: list_color[34],
                          eG: list_color[35],
                          sV: list_color[36],
                          gQ: list_color[37],
                          eR: list_color[38],
                          eE: list_color[39],
                          eT: list_color[40],
                          fI: list_color[41],
                          fR: list_color[42],
                          gE: list_color[43],
                          dE: list_color[44],
                          gH: list_color[45],
                          gR: list_color[46],
                          gL: list_color[47],
                          gT: list_color[48],
                          gN: list_color[49],
                          hU: list_color[50],
                          iS: list_color[51],
                          iN: list_color[52],
                          iD: list_color[53],
                          iR: list_color[54],
                          iQ: list_color[55],
                          iE: list_color[56],
                          iL: list_color[57],
                          iT: list_color[58],
                          jM: list_color[59],
                          jP: list_color[60],
                          jO: list_color[61],
                          kZ: list_color[62],
                          kE: list_color[63],
                          kI: list_color[64],
                          kP: list_color[65],
                          kR: list_color[66],
                          kW: list_color[67],
                          kG: list_color[68],
                          lA: list_color[69],
                          lV: list_color[70],
                          lB: list_color[71],
                          lR: list_color[72],
                          lY: list_color[73],
                          lT: list_color[74],
                          lU: list_color[75],
                          mO: list_color[76],
                          mG: list_color[77],
                          mW: list_color[78],
                          mY: list_color[79],
                          mL: list_color[80],
                          mT: list_color[81],
                          mR: list_color[82],
                          mX: list_color[83],
                          mD: list_color[84],
                          mC: list_color[85],
                          mN: list_color[86],
                          mA: list_color[87],
                          mZ: list_color[88],
                          mM: list_color[89],
                          nA: list_color[90],
                          nP: list_color[91],
                          nL: list_color[92],
                          nZ: list_color[93],
                          nI: list_color[94],
                          nE: list_color[95],
                          nG: list_color[96],
                          nO: list_color[97],
                          oM: list_color[98],
                          pK: list_color[99],
                          pW: list_color[100],
                          pS: list_color[101],
                          pA: list_color[102],
                          pG: list_color[103],
                          pY: list_color[104],
                          pE: list_color[105],
                          pH: list_color[106],
                          pL: list_color[107],
                          pT: list_color[108],
                          qA: list_color[109],
                          rO: list_color[110],
                          rU: list_color[111],
                          rW: list_color[112],
                          sA: list_color[113],
                          sN: list_color[114],
                          rS: list_color[115],
                          sG: list_color[116],
                          sK: list_color[117],
                          sI: list_color[118],
                          sO: list_color[119],
                          zA: list_color[120],
                          eS: list_color[121],
                          lK: list_color[122],
                          sD: list_color[123],
                          sR: list_color[124],
                          sE: list_color[125],
                          cH: list_color[126],
                          sY: list_color[127],
                          tW: list_color[128],
                          tZ: list_color[129],
                          tH: list_color[130],
                          tN: list_color[131],
                          tR: list_color[132],
                          tM: list_color[133],
                          uG: list_color[134],
                          uA: list_color[135],
                          aE: list_color[136],
                          gB: list_color[137],
                          uS: list_color[138],
                          uY: list_color[139],
                          uZ: list_color[140],
                          vE: list_color[141],
                          vN: list_color[142],
                          eH: list_color[143],
                          yE: list_color[144],
                          zM: list_color[145],
                          zW: list_color[146],
                        ).toMap(),
                        // If the color of a country is not specified it will take in a default color.
                        defaultColor: Colors.grey,
                        // CountryColors takes in 250 different colors that will color each country the color you want. In this example it generates a random color each time SetState({}) is called.
                        callback: (id, name, tapdetails) {
                          print(id);
                          if (list_id[index_lista] == id) {
                            punteggio++;
                            list_color[index_lista] = Colors.green;
                            do {
                              index_lista = Random().nextInt(list_id.length);
                              domanda = "Trova: " + list_name[index_lista];
                            } while (list_color[index_lista] != Colors.grey);
                          } else {}
                        },
                      ),
                    ),
                    // Creates 8% from right side so the map looks more centered.
                    Container(width: MediaQuery.of(context).size.width * 0.08),
                  ],
                ),
              ),
              Visibility(
                visible: !timer_avviato,
                child: ElevatedButton(
                  onPressed: startTimer,
                  child: Text(
                    'Start',
                    style: TextStyle(
                      fontSize: 30,
                    ),
                  ),
                ),
              ),
              // ElevatedButton(
              //   onPressed: stopTimer,
              //   child: Text(
              //     'Stop',
              //     style: TextStyle(
              //       fontSize: 30,
              //     ),
              //   ),
              // ),
              // ElevatedButton(
              //   onPressed: resetTimer,
              //   child: Text(
              //     'Reset',
              //     style: TextStyle(
              //       fontSize: 30,
              //     ),
              //   ),
              // ),
            ],
          ),
        ),
      ],
    );
  }
}
